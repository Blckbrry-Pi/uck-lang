import { println, eprintln, input } from std::io;

import { Option: { Some, None } } from std::enums;
import i32 from std::numbers;

#[derive(Eq, SelectRandom)]
enum Hand {
    Rock,
    Papr,
    Scis,

    public toString(this) -> String {
        return match this {
            Rock => "Rock",
            Papr => "Paper",
            Scis => "Scissors",
        }
    }
}


static const WINNING_MATCHUPS = [(Hand::Rock, Hand::Scis), (Hand::Scis, Hand::Papr), (Hand::Papr, Hand::Rock)];

static const STRINGS_TO_HANDS = [("rock", Hand::Rock), ("paper", Hand::Papr), ("scissors", Hand::Scis)];

fun main(String[] args) -> i32 {
    match args[0] {
        Some(arg) => {
            const numTimes = i32::parse(arg);

            for _ in 0..numTimes {
                loop {
                    match stringToHand(input("Enter \"rock\", \"paper\", or \"scissors\": ")) {
                        Some(hand) => {
                            let computerHand = Hand::selectRandom();
                            match calcRound(Hand::selectRandom(), hand) {
                                RoundResult::CWin => println!("You lost with %s against the computer's %s.", hand.toString(), computerHand.toString()),
                                RoundResult::PWin => println!("You won with %s against the computer's %s!", hand.toString(), computerHand.toString()),
                                RoundResult::Draw => println!("You and the computer both played %s. It was a tie.", computerHand.toString()),
                            }
                            break;
                        }
                        None => continue,
                    }
                }
            }
        }
        None => {
            eprintln!("Please pass in the number of rounds you would like to play.");
            return 1;
        }
    }
}

enum RoundResult {
    CWin,
    PWin,
    Draw,
}

fun calcRound(computerHand: Hand, playerHand: Hand) -> RoundResult {
    if computerHand == playerHand {
        return RoundResult::Draw;
    } else if wins(computerHand, playerHand) {
        return RoundResult::CWin;
    } else {
        return RoundResult::PWin;
    }
}


fun wins(matchup: (Hand, Hand)) -> bool {
    for winningMatchup in WINNING_MATCHUPS.toIter() {
        if winningMatchup == matchup {
            return true;
        }
    }
    return false;
}


fun stringToHand(stringIn: String) -> Option<Hand> {
    for possibHand in STRINGS_TO_HANDS.toIter() {
        if possibHand.0 == stringIn {
            return Some(possibHand.1);
        }
    }
    return None;
}